context Obstacle {
    guard : self.isDefined()
    constraint SpeedRange {
        check : 
            (self.obstacleType == ObstacleType#Pedestrian implies self.speed <= 30.0) and
            (self.obstacleType == ObstacleType#Vehicle implies self.speed <= 120.0)
        message : "Invalid speed for obstacle " + self.obstacleType + ": speed " + self.speed + 
                  " exceeds limit (Pedestrian <= 30.0, Vehicle <= 120.0)."
    }
}

context EmergencyActions {
    guard : self.isDefined()
    constraint FastResponse {
        check : self.responseTime <= 1.0
        message : "Invalid response time for action " + self.actionType + ": responseTime " + self.responseTime + " exceeds 1.0 seconds."
    }
    constraint ActuatorStatus {
        check : self.executedBy.status = true
        message : "Actuator status for action " + self.actionType + " is inactive: status must be true."
    }
}

context SafetyConstraint {
    guard : self.isDefined()
    constraint CriticalTiming {
        check : (self.constraintType == ConstraintType#Timing and self.isCritical) implies self.threshold <= 0.5
        message : "Invalid threshold for critical timing constraint: threshold " + self.threshold + " exceeds 0.5 seconds."
    }
}

context Sensor {
    guard : self.isDefined()
    constraint SensorAccuracy {
        check : self.accuracy >= 75.0
        message : "Invalid accuracy for sensor " + self.sensorType + ": accuracy " + self.accuracy + " is below 75.0."
    }
}

context DetectionEvent {
    guard : self.isDefined()
    constraint DistanceSafety {
        check : self.distance <= 5.0 implies self.triggeredBy.eContainer().controller.actions->forAll(a | a.actionType <> ActionType#Steer)
        message : "Steer action invalid for distance " + self.distance + " meters: must be Brake or Warn."
    }
}